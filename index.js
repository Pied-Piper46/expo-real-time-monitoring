const axios = require('axios');
const fs = require('fs');
const path = require('path');

// „Éë„Éì„É™„Ç™„É≥Âêç„Éû„ÉÉ„Éî„É≥„Ç∞ÔºàSPECIFICATION.md„Åã„ÇâÊäΩÂá∫Ôºâ
const PAVILION_NAMES = {
    'C0R0': ['UAE', ''],
    'C0R3': ['UAE„Éê„É™„Ç¢„Éï„É™„Éº', '„Éê„É™„Ç¢„Éï„É™„Éº'],
    'C2N0': ['„Ç§„Çø„É™„Ç¢~15:00', '~15:00'],
    'C2N3': ['„Ç§„Çø„É™„Ç¢15:00~', '15:00~'],
    'C570': ['Ëã±ÂõΩ', ''],
    'C730': ['„Ç™„Éº„Çπ„Éà„É©„É™„Ç¢', ''],
    'C7R0': ['„Ç™„É©„É≥„ÉÄ', ''],
    'C930': ['„Ç´„Éä„ÉÄ', ''],
    'C9J0': ['ÈüìÂõΩ', ''],
    'CCB0': ['„ÇØ„Ç¶„Çß„Éº„Éà', ''],
    'CFR0': ['Ëµ§ÂçÅÂ≠ó', ''],
    'CFV0': ['ÂõΩÈÄ£', ''],
    'CM30': ['„Çª„É´„Éì„Ç¢', ''],
    'CO70': ['„Çø„Ç§', ''],
    'CO73': ['„Çø„Ç§Èöú„Åå„ÅÑËÄÖÁî®', 'Èöú„Åå„ÅÑËÄÖÁî®'],
    'D630': ['„Éù„Éº„É©„É≥„Éâ', ''],
    'D633': ['„Éù„Éº„É©„É≥„Éâ„Ç∑„Éß„Éë„É≥', '„Ç∑„Éß„Éë„É≥'],
    'H1H9': ['Êó•Êú¨È§®', ''],
    'H1HC': ['Êó•Êú¨È§®„Éó„É©„É≥„ÉàË¶ãÂ≠¶', '„Éó„É©„É≥„ÉàË¶ãÂ≠¶'],
    'H1HF': ['Êó•Êú¨È§®„Éó„É©„É≥„ÉàË¶ãÂ≠¶Ëªä„ÅÑ„Åô', '„Éó„É©„É≥„ÉàË¶ãÂ≠¶Ëªä„ÅÑ„Åô'],
    'H5H0': ['„Éò„É´„Çπ„Ç±„Ç¢„É™„Éú„Éº„É≥', '„É™„Éú„Éº„É≥'],
    'H5H3': ['„Éò„É´„Çπ„Ç±„Ç¢„É™„Éú+‰∫∫Áîü', '„É™„Éú+‰∫∫Áîü'],
    'H5H9': ['„Éò„É´„Çπ„Ç±„Ç¢„É¢„É≥„Éè„É≥', '„É¢„É≥„Éè„É≥'],
    'H5HC': ['„Éò„É´„Çπ„Ç±„Ç¢„É¢„É≥„Éè„É≥(Ëªä„ÅÑ„Åô)', '„É¢„É≥„Éè„É≥(Ëªä„ÅÑ„Åô)'],
    'H7H0': ['Èñ¢Ë•ø', ''],
    'H7H3': ['Èñ¢Ë•øÈ£≤È£ü‰ªò„Éè„Ç§„ÉÅ„Çß„Ç¢', 'È£≤È£ü‰ªò„Éè„Ç§„ÉÅ„Çß„Ç¢'],
    'H7H6': ['Èñ¢Ë•øÈ£≤È£ü‰ªò„É≠„Éº„ÉÅ„Çß„Ç¢', 'È£≤È£ü‰ªò„É≠„Éº„ÉÅ„Çß„Ç¢'],
    'HAH0': ['NTT', ''],
    'HCH0': ['ÈõªÂäõÈ§®', ''],
    'HCH3': ['ÈõªÂäõÈ§®Ëªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'HEH0': ['‰ΩèÂèãÈ§®', ''],
    'HEH3': ['‰ΩèÂèãÈ§®Ëªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'HEH6': ['‰ΩèÂèãÈ§®Ê§çÊûó‰ΩìÈ®ì', 'Ê§çÊûó‰ΩìÈ®ì'],
    'HGH0': ['„Éé„É¢„ÅÆÂõΩ', ''],
    'HIH0': ['‰∏âËè±Êú™Êù•È§®', ''],
    'HIH3': ['‰∏âËè±Êú™Êù•È§®Ëªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'HKH0': ['„Çà„Åó„ÇÇ„Å®', ''],
    'HMH0': ['PASONA', ''],
    'HMH3': ['PASONAËªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'HOH0': ['„Éñ„É´„Éº„Ç™„Éº„Ç∑„É£„É≥„Éâ„Éº„É†', ''],
    'HOH3': ['„Éñ„É´„Éº„Ç™„Éº„Ç∑„É£„É≥„Éâ„Éº„É†Ëªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'HQH0': ['„Ç¨„É≥„ÉÄ„É†', ''],
    'HSH0': ['TECH WORLD', ''],
    'HUH0': ['„Ç¨„Çπ„Éª„Åä„Å∞„Åë', ''],
    'HUH3': ['„Ç¨„Çπ„Éª„Åä„Å∞„ÅëËªä„ÅÑ„Åô„ÉªË£úÂä©Áä¨', 'Ëªä„ÅÑ„Åô„ÉªË£úÂä©Áä¨'],
    'HUH6': ['„Ç¨„Çπ„Éª„Åä„Å∞„Åë„Çπ„Éû„Éº„Éà„Éá„Éê„Ç§„Çπ', '„Çπ„Éû„Éº„Éà„Éá„Éê„Ç§„Çπ'],
    'HWH0': ['È£ØÁî∞√óÂ§ßÈò™ÂÖ¨Á´ãÂ§ßÂ≠¶', ''],
    'HWH3': ['È£ØÁî∞√óÂ§ßÈò™ÂÖ¨Á´ãÂ§ßÂ≠¶Ëªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'I300': ['Better Co-Being', ''],
    'I600': ['„ÅÑ„ÅÆ„Å°„ÅÆÊú™Êù•', ''],
    'I603': ['„ÅÑ„ÅÆ„Å°„ÅÆÊú™Êù•Ëªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'I606': ['„ÅÑ„ÅÆ„Å°„ÅÆÊú™Êù•„Ç§„É≥„ÇØ„É´„Éº„Ç∑„Éñ', '„Ç§„É≥„ÇØ„É´„Éº„Ç∑„Éñ'],
    'I900': ['„ÅÑ„ÅÆ„Å°„ÅÆÈÅä„Å≥Â†¥', ''],
    'I903': ['„ÅÑ„ÅÆ„Å°„ÅÆÈÅä„Å≥Â†¥Ëªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'I906': ['„ÅÑ„ÅÆ„Å°„ÅÆÈÅä„Å≥Â†¥English', 'English'],
    'I909': ['„ÅÑ„ÅÆ„Å°„ÅÆÈÅä„Å≥Â†¥EnglishËªä„ÅÑ„Åô', 'EnglishËªä„ÅÑ„Åô'],
    'I90C': ['„ÅÑ„ÅÆ„Å°„ÅÆÈÅä„Å≥Â†¥„Å∫„Å°„ÇÉ„Åè„Å°„ÇÉ', '„Å∫„Å°„ÇÉ„Åè„Å°„ÇÉ'],
    'I90F': ['„ÅÑ„ÅÆ„Å°„ÅÆÈÅä„Å≥Â†¥„Å∫„Å°„ÇÉ„Åè„Å°„ÇÉ(Ëªä„ÅÑ„Åô)', '„Å∫„Å°„ÇÉ„Åè„Å°„ÇÉ(Ëªä„ÅÑ„Åô)'],
    'IC00': ['null¬≤', ''],
    'IC03': ['null¬≤„Ç§„É≥„Çπ„Çø„É¨„Éº„Ç∑„Éß„É≥', '„Ç§„É≥„Çπ„Çø„É¨„Éº„Ç∑„Éß„É≥'],
    'IF00': ['„ÅÑ„ÅÆ„Å°ÂãïÁöÑÂπ≥Ë°°È§®', ''],
    'IF03': ['„ÅÑ„ÅÆ„Å°ÂãïÁöÑÂπ≥Ë°°È§®Ëß¶Ë¶ö‰ΩìÈ®ì(Ë¶ñË¶ö„ÉªËÅ¥Ë¶ö„Å´ÈöúÂÆ≥„Åå„ÅÇ„ÇãÊñπ)', 'Ëß¶Ë¶ö‰ΩìÈ®ì(Ë¶ñË¶ö„ÉªËÅ¥Ë¶ö„Å´ÈöúÂÆ≥„Åå„ÅÇ„ÇãÊñπ)'],
    'II00': ['„ÅÑ„ÅÆ„Å°„ÇÅ„Åê„ÇãÂÜíÈô∫Ë∂ÖÊôÇÁ©∫„Ç∑„Ç¢„Çø„Éº', 'Ë∂ÖÊôÇÁ©∫„Ç∑„Ç¢„Çø„Éº'],
    'II03': ['„ÅÑ„ÅÆ„Å°„ÇÅ„Åê„ÇãÂÜíÈô∫Ë∂ÖÊôÇÁ©∫„Ç∑„Ç¢„Çø„Éº(Ëªä„ÅÑ„Åô)', 'Ë∂ÖÊôÇÁ©∫„Ç∑„Ç¢„Çø„Éº(Ëªä„ÅÑ„Åô)'],
    'II06': ['„ÅÑ„ÅÆ„Å°„ÇÅ„Åê„ÇãÂÜíÈô∫ANIMA!', 'ANIMA!'],
    'IL00': ['EARTH MART', ''],
    'IO00': ['„ÅÑ„ÅÆ„Å°„ÅÆ„ÅÇ„Åã„Åó', ''],
    'IO03': ['„ÅÑ„ÅÆ„Å°„ÅÆ„ÅÇ„Åã„ÅóËªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'J900': ['Êú™Êù•„ÅÆÈÉΩÂ∏Ç„Ç∑„Ç¢„Çø„ÉºÂÖ•Â†¥‰ªò„Åç', '„Ç∑„Ç¢„Çø„ÉºÂÖ•Â†¥‰ªò„Åç'],
    'J903': ['Êú™Êù•„ÅÆÈÉΩÂ∏Ç', ''],
    'JC00': ['Á©∫È£õ„Å∂„ÇØ„É´„Éû', ''],
    'Q001': ['„Ç¢„Ç™„Å®Â§ú„ÅÆËôπ', ''],
    'Q004': ['„Ç¢„Ç™„Å®Â§ú„ÅÆËôπËªä„ÅÑ„Åô', 'Ëªä„ÅÑ„Åô'],
    'Q007': ['‰∏áÂçö„Çµ„Ç¶„Éä90ÂàÜÁî∑ÊÄß', '90ÂàÜÁî∑ÊÄß'],
    'Q010': ['‰∏áÂçö„Çµ„Ç¶„Éä90ÂàÜÂ•≥ÊÄß', '90ÂàÜÂ•≥ÊÄß'],
    'Q013': ['‰∏áÂçö„Çµ„Ç¶„Éä90ÂàÜÁî∑Â•≥Ê∑∑Âêà', '90ÂàÜÁî∑Â•≥Ê∑∑Âêà'],
    'H3H0': ['„Ç¶„Éº„Éû„É≥„Ç∫', ''],
};

class ExpoMonitor {
    constructor(configPath = './config.json') {
        this.config = this.loadConfig(configPath);
        this.debug = this.config.debug || process.argv.includes('--debug');
        this.isRunning = false;
        this.previousStates = new Map(); // „Éë„Éì„É™„Ç™„É≥+„Çπ„É≠„ÉÉ„Éà„ÅÆÂâçÂõûÁä∂ÊÖã„ÇíË®òÈå≤
        
        if (this.debug) {
            console.log('„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅßÂÆüË°å‰∏≠');
            console.log('Áõ£Ë¶ñÂØæË±°„Éë„Éì„É™„Ç™„É≥:', this.config.monitoring.pavilions);
        }
    }

    loadConfig(configPath) {
        try {
            const configData = fs.readFileSync(configPath, 'utf8');
            return JSON.parse(configData);
        } catch (error) {
            console.error(`Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${configPath}`);
            console.error('config.sample.json „ÇíÂèÇËÄÉ„Å´ config.json „Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            process.exit(1);
        }
    }

    async fetchExpoData() {
        try {
            const response = await axios.get(this.config.api.dataUrl, {
                timeout: this.config.api.timeout || 10000,
                headers: {
                    'User-Agent': 'ExpoMonitor/1.0'
                }
            });
            return response.data;
        } catch (error) {
            throw new Error(`APIÂèñÂæó„Ç®„É©„Éº: ${error.message}`);
        }
    }

    isBusinessHours() {
        const now = new Date();
        const hour = now.getHours();
        return hour >= 9 && hour < 21;
    }

    getMonitoringInterval() {
        const now = new Date();
        const hour = now.getHours();
        const minute = now.getMinutes();
        
        if (hour >= 9 && hour < 21) {
            // Âñ∂Ê•≠ÊôÇÈñìÂÜÖ: ÈÄöÂ∏∏ÈñìÈöî
            return this.config.monitoring.interval * 1000;
        } else if (hour === 8 && minute >= 45) {
            // 8:45-8:59: Âñ∂Ê•≠ÈñãÂßãÁõ¥Ââç„ÅÆÈ´òÈ†ªÂ∫¶Áõ£Ë¶ñ
            return 30 * 1000;
        } else if (hour >= 8 && hour < 9) {
            // 8:00-8:44: Ê∫ñÂÇôÊôÇÈñìÂ∏Ø
            return 5 * 60 * 1000;
        } else {
            // Ê∑±Â§ú„ÉªÊó©Êúù: ‰ΩéÈ†ªÂ∫¶Áõ£Ë¶ñ
            return 30 * 60 * 1000;
        }
    }

    getPavilionDisplayName(pavilionCode, apiName) {
        if (PAVILION_NAMES[pavilionCode]) {
            const [shortName, category] = PAVILION_NAMES[pavilionCode];
            if (category) {
                return `${shortName} (${category})`;
            }
            return shortName;
        }
        return apiName || pavilionCode;
    }

    getStatusText(status) {
        switch (status) {
            case 0: return 'üü¢ Á©∫„Åç„ÅÇ„Çä';
            case 1: return 'üü° ÊÆã„Çä„Çè„Åö„Åã';
            case 2: return 'üî¥ Ê∫ÄÂ∏≠';
            default: return '‚ö™ „Çπ„É≠„ÉÉ„Éà„Å™„Åó';
        }
    }

    formatTime(timeStr) {
        // "0900" -> "09:00"
        if (timeStr.length === 4) {
            return `${timeStr.slice(0, 2)}:${timeStr.slice(2, 4)}`;
        }
        return timeStr;
    }

    formatDateToYMD() {
        const date = new Date();
        const y = date.getFullYear();
        const m = String(date.getMonth() + 1).padStart(2, '0');
        const d = String(date.getDate()).padStart(2, '0');
        return `${y}${m}${d}`;
    }

    generateReservationUrl(pavilionCode) {
        // ÂÆüÈöõ„ÅÆ‰∫àÁ¥ÑURL„ÇíÁîüÊàêÔºàticketIds„ÅåÂøÖË¶Å„Å†„Åå„ÄÅ„Çµ„É≥„Éó„É´„Å®„Åó„Å¶Âü∫Êú¨URL„ÇíËøî„ÅôÔºâ
        const baseUrl = 'https://ticket.expo2025.or.jp/event_time/';
        const params = new URLSearchParams({
            event_id: pavilionCode,
            screen_id: '108',
            lottery: '5',
            entrance_date: this.formatDateToYMD()
        });
        return `${baseUrl}?${params.toString()}`;
    }

    logAvailability(pavilionCode, timeSlot, status) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            pavilion_code: pavilionCode,
            time_slot: this.formatTime(timeSlot),
            status: status
        };

        const logLine = JSON.stringify(logEntry) + '\n';
        const logFile = this.config.logging?.file || './availability_log.jsonl';

        try {
            fs.appendFileSync(logFile, logLine);
            if (this.debug) {
                console.log(`„É≠„Ç∞Ë®òÈå≤: ${pavilionCode} ${this.formatTime(timeSlot)} - „Çπ„ÉÜ„Éº„Çø„Çπ${status}`);
            }
        } catch (error) {
            console.error('„É≠„Ç∞Ë®òÈå≤„Ç®„É©„Éº:', error.message);
        }
    }

    async sendSlackNotification(pavilion, slot) {
        if (!this.config.slack?.enabled || !this.config.slack?.webhookUrl) {
            return;
        }

        const displayName = this.getPavilionDisplayName(pavilion.c, pavilion.n);
        const statusText = this.getStatusText(slot.s);
        const timeText = this.formatTime(slot.t);
        const reservationUrl = this.generateReservationUrl(pavilion.c);

        const message = {
            channel: this.config.slack.channel,
            username: this.config.slack.username || 'Expo Monitor Bot',
            icon_emoji: this.config.slack.iconEmoji || ':robot_face:',
            attachments: [{
                color: slot.s === 0 ? 'good' : 'warning',
                title: `${statusText} - ${displayName}`,
                fields: [
                    {
                        title: 'ÊôÇÈñì',
                        value: timeText,
                        short: true
                    },
                    {
                        title: '‰∫àÁ¥ÑURL',
                        value: `<${reservationUrl}|‰∫àÁ¥Ñ„Éö„Éº„Ç∏„ÇíÈñã„Åè>`,
                        short: false
                    }
                ],
                footer: 'Expo Monitor',
                ts: Math.floor(Date.now() / 1000)
            }]
        };

        try {
            await axios.post(this.config.slack.webhookUrl, message);
            if (this.debug) {
                console.log(`SlackÈÄöÁü•ÈÄÅ‰ø°: ${displayName} (${timeText}) - ${statusText}`);
            }
        } catch (error) {
            console.error('SlackÈÄöÁü•ÈÄÅ‰ø°„Ç®„É©„Éº:', error.message);
            throw error;
        }
    }

    async sendLineNotification(pavilion, slot) {
        if (!this.config.line?.enabled || !this.config.line?.channelAccessToken) {
            return;
        }

        const displayName = this.getPavilionDisplayName(pavilion.c, pavilion.n);
        const statusText = this.getStatusText(slot.s);
        const timeText = this.formatTime(slot.t);
        // const reservationUrl = this.generateReservationUrl(pavilion.c);

        const message = {
            messages: [{
                type: "text",
                // text: `${statusText} - ${displayName}\nÊôÇÈñì: ${timeText}\n‰∫àÁ¥ÑURL: ${reservationUrl}`
                text: `${statusText} - ${displayName}\nÊôÇÈñì: ${timeText}`
            }]
        };

        try {
            await axios.post('https://api.line.me/v2/bot/message/broadcast', message, {
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.config.line.channelAccessToken}`
                }
            });
            if (this.debug) {
                console.log(`LINEÈÄöÁü•ÈÄÅ‰ø°: ${displayName} (${timeText}) - ${statusText}`);
            }
        } catch (error) {
            console.error('LINEÈÄöÁü•ÈÄÅ‰ø°„Ç®„É©„Éº:', error.message);
            throw error;
        }
    }

    checkAvailability(pavilions) {
        const availableSlots = [];
        
        for (const pavilion of pavilions) {
            // Áõ£Ë¶ñÂØæË±°„Éë„Éì„É™„Ç™„É≥„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            if (!this.config.monitoring.pavilions.includes(pavilion.c)) {
                continue;
            }

            // „Éë„Éì„É™„Ç™„É≥Âêç„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
            if (!pavilion.n || pavilion.n === '') {
                continue;
            }

            // „Çπ„É≠„ÉÉ„Éà„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            for (const slot of pavilion.s || []) {
                const stateKey = `${pavilion.c}_${slot.t}`;
                const previousStatus = this.previousStates.get(stateKey);
                
                // Áä∂ÊÖã0ÔºàÁ©∫„Åç„ÅÇ„ÇäÔºâ„Å´„Å™„Å£„ÅüÂ†¥Âêà„ÅÆ„Åø„É≠„Ç∞Ë®òÈå≤
                if (slot.s === 0 && previousStatus !== 0) {
                    this.logAvailability(pavilion.c, slot.t, slot.s);
                }
                
                // ÂâçÂõûÁä∂ÊÖã„ÇíÊõ¥Êñ∞
                this.previousStates.set(stateKey, slot.s);
                
                // ÈÄöÁü•Âà§ÂÆöÔºàÊó¢Â≠ò„É≠„Ç∏„ÉÉ„ÇØÔºâ
                if (this.config.monitoring.notifyOnStatus.includes(slot.s)) {
                    availableSlots.push({
                        pavilion: pavilion,
                        slot: slot
                    });
                }
            }
        }

        return availableSlots;
    }

    async processAvailableSlots(availableSlots) {
        for (const { pavilion, slot } of availableSlots) {
            try {
                // SlackÈÄöÁü•
                await this.sendSlackNotification(pavilion, slot);
                // LINEÈÄöÁü•
                await this.sendLineNotification(pavilion, slot);
                // „É¨„Éº„ÉàÂà∂ÈôêÂØæÁ≠ñ„ÅßÂ∞ë„ÅóÂæÖÊ©ü
                await new Promise(resolve => setTimeout(resolve, 100));
            } catch (error) {
                console.error(`ÈÄöÁü•ÈÄÅ‰ø°Â§±Êïó (${pavilion.c}):`, error.message);
            }
        }
    }

    async monitorOnce() {
        try {
            const pavilions = await this.fetchExpoData();
            
            // Á©∫„Éá„Éº„Çø„ÅÆÂ†¥Âêà„ÅÆ„É≠„Ç∞Âá∫Âäõ
            if (!pavilions || pavilions.length === 0) {
                const businessHours = this.isBusinessHours();
                const timeStr = new Date().toLocaleString('ja-JP', {timeZone: 'Asia/Tokyo'});
                if (businessHours) {
                    console.log(`${timeStr}: Âñ∂Ê•≠ÊôÇÈñìÂÜÖ„Åß„Åô„ÅåÁ©∫„Éá„Éº„Çø„ÇíÂèó‰ø°„Åó„Åæ„Åó„Åü`);
                } else if (this.debug) {
                    console.log(`${timeStr}: Âñ∂Ê•≠ÊôÇÈñìÂ§ñ - Á©∫„Éá„Éº„Çø„ÇíÂèó‰ø°`);
                }
                return;
            }
            
            const availableSlots = this.checkAvailability(pavilions);

            if (availableSlots.length > 0) {
                const timeStr = new Date().toLocaleString('ja-JP', {timeZone: 'Asia/Tokyo'});
                console.log(`${timeStr}: ${availableSlots.length}‰ª∂„ÅÆÁ©∫„Åç„ÇíÊ§úÂá∫`);
                await this.processAvailableSlots(availableSlots);
            } else if (this.debug) {
                const timeStr = new Date().toLocaleString('ja-JP', {timeZone: 'Asia/Tokyo'});
                console.log(`${timeStr}: Á©∫„Åç„Å™„Åó`);
            }

        } catch (error) {
            console.error(`Áõ£Ë¶ñ„Ç®„É©„Éº: ${error.message}`);
        }
    }

    async start() {
        console.log('Expo Monitor ÈñãÂßã');
        console.log(`Âü∫Êú¨Áõ£Ë¶ñÈñìÈöî: ${this.config.monitoring.interval}Áßí (Âñ∂Ê•≠ÊôÇÈñìÂÜÖ)`);
        console.log(`Áõ£Ë¶ñÂØæË±°: ${this.config.monitoring.pavilions.join(', ')}`);
        console.log('ÊôÇÈñìÂ∏ØÂà•Áõ£Ë¶ñÈñìÈöî: Ê∑±Â§ú30ÂàÜ ‚Üí Êúù8ÊôÇ‰ª•Èôç5ÂàÜ ‚Üí 8:45‰ª•Èôç30Áßí ‚Üí Âñ∂Ê•≠ÊôÇÈñìÂÜÖ2Áßí');
        
        this.isRunning = true;

        // ÊúÄÂàù„Å´‰∏ÄÂ∫¶ÂÆüË°å
        await this.monitorOnce();

        // ÂãïÁöÑÈñìÈöî„Åß„ÅÆÂÆöÊúüÂÆüË°å
        const scheduleNext = () => {
            if (!this.isRunning) return;
            
            const currentInterval = this.getMonitoringInterval();
            const now = new Date();
            const timeStr = now.toTimeString().slice(0, 8);
            
            if (this.debug) {
                console.log(`${timeStr}: Ê¨°ÂõûÂÆüË°å„Åæ„Åß ${currentInterval/1000}Áßí`);
            }
            
            this.timeoutId = setTimeout(async () => {
                if (this.isRunning) {
                    await this.monitorOnce();
                    scheduleNext();
                }
            }, currentInterval);
        };

        scheduleNext();

        // ÁµÇ‰∫ÜÂá¶ÁêÜ„ÅÆË®≠ÂÆö
        process.on('SIGINT', () => {
            this.stop();
        });

        process.on('SIGTERM', () => {
            this.stop();
        });
    }

    stop() {
        console.log('\nExpo Monitor ÂÅúÊ≠¢‰∏≠...');
        this.isRunning = false;
        if (this.intervalId) {
            clearInterval(this.intervalId);
        }
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
        }
        process.exit(0);
    }
}

// „É°„Ç§„É≥ÂÆüË°åÈÉ®ÂàÜ
if (require.main === module) {
    const monitor = new ExpoMonitor();
    monitor.start().catch(error => {
        console.error('Fatal error:', error);
        process.exit(1);
    });
}

module.exports = ExpoMonitor;